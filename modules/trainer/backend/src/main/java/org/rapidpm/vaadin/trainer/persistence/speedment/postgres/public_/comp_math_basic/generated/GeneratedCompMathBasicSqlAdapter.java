package org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.comp_math_basic.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.comp_math_basic.CompMathBasic;
import org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.comp_math_basic.CompMathBasicImpl;
import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.comp_math_basic.CompMathBasic}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCompMathBasicSqlAdapter {
    
    private final TableIdentifier<CompMathBasic> tableIdentifier;
    
    protected GeneratedCompMathBasicSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("postgres", "public", "comp_math_basic");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected CompMathBasic apply(ResultSet resultSet) throws SpeedmentException {
        final CompMathBasic entity = createEntity();
        try {
            entity.setId(            resultSet.getShort(1)     );
            entity.setOpA(           resultSet.getDouble(2)    );
            entity.setOp(            resultSet.getString(3)    );
            entity.setOpB(           resultSet.getString(4)    );
            entity.setResultMachine( resultSet.getDouble(5)    );
            entity.setResultHuman(   resultSet.getString(6)    );
            entity.setResultOk(      resultSet.getBoolean(7)   );
            entity.setCreated(       resultSet.getTimestamp(8) );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected CompMathBasicImpl createEntity() {
        return new CompMathBasicImpl();
    }
}