package org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.comp_math_basic.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.comp_math_basic.CompMathBasic;

/**
 * The generated base implementation of the {@link
 * org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.comp_math_basic.CompMathBasic}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCompMathBasicImpl implements CompMathBasic {
    
    private short id;
    private double opA;
    private String op;
    private String opB;
    private double resultMachine;
    private String resultHuman;
    private boolean resultOk;
    private Timestamp created;
    
    protected GeneratedCompMathBasicImpl() {
        
    }
    
    @Override
    public short getId() {
        return id;
    }
    
    @Override
    public double getOpA() {
        return opA;
    }
    
    @Override
    public String getOp() {
        return op;
    }
    
    @Override
    public String getOpB() {
        return opB;
    }
    
    @Override
    public double getResultMachine() {
        return resultMachine;
    }
    
    @Override
    public Optional<String> getResultHuman() {
        return Optional.ofNullable(resultHuman);
    }
    
    @Override
    public boolean getResultOk() {
        return resultOk;
    }
    
    @Override
    public Timestamp getCreated() {
        return created;
    }
    
    @Override
    public CompMathBasic setId(short id) {
        this.id = id;
        return this;
    }
    
    @Override
    public CompMathBasic setOpA(double opA) {
        this.opA = opA;
        return this;
    }
    
    @Override
    public CompMathBasic setOp(String op) {
        this.op = op;
        return this;
    }
    
    @Override
    public CompMathBasic setOpB(String opB) {
        this.opB = opB;
        return this;
    }
    
    @Override
    public CompMathBasic setResultMachine(double resultMachine) {
        this.resultMachine = resultMachine;
        return this;
    }
    
    @Override
    public CompMathBasic setResultHuman(String resultHuman) {
        this.resultHuman = resultHuman;
        return this;
    }
    
    @Override
    public CompMathBasic setResultOk(boolean resultOk) {
        this.resultOk = resultOk;
        return this;
    }
    
    @Override
    public CompMathBasic setCreated(Timestamp created) {
        this.created = created;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "            + Objects.toString(getId()));
        sj.add("opA = "           + Objects.toString(getOpA()));
        sj.add("op = "            + Objects.toString(getOp()));
        sj.add("opB = "           + Objects.toString(getOpB()));
        sj.add("resultMachine = " + Objects.toString(getResultMachine()));
        sj.add("resultHuman = "   + Objects.toString(OptionalUtil.unwrap(getResultHuman())));
        sj.add("resultOk = "      + Objects.toString(getResultOk()));
        sj.add("created = "       + Objects.toString(getCreated()));
        return "CompMathBasicImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof CompMathBasic)) { return false; }
        final CompMathBasic thatCompMathBasic = (CompMathBasic)that;
        if (this.getId() != thatCompMathBasic.getId()) {return false; }
        if (this.getOpA() != thatCompMathBasic.getOpA()) {return false; }
        if (!Objects.equals(this.getOp(), thatCompMathBasic.getOp())) {return false; }
        if (!Objects.equals(this.getOpB(), thatCompMathBasic.getOpB())) {return false; }
        if (this.getResultMachine() != thatCompMathBasic.getResultMachine()) {return false; }
        if (!Objects.equals(this.getResultHuman(), thatCompMathBasic.getResultHuman())) {return false; }
        if (this.getResultOk() != thatCompMathBasic.getResultOk()) {return false; }
        if (!Objects.equals(this.getCreated(), thatCompMathBasic.getCreated())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Short.hashCode(getId());
        hash = 31 * hash + Double.hashCode(getOpA());
        hash = 31 * hash + Objects.hashCode(getOp());
        hash = 31 * hash + Objects.hashCode(getOpB());
        hash = 31 * hash + Double.hashCode(getResultMachine());
        hash = 31 * hash + Objects.hashCode(getResultHuman());
        hash = 31 * hash + Boolean.hashCode(getResultOk());
        hash = 31 * hash + Objects.hashCode(getCreated());
        return hash;
    }
}