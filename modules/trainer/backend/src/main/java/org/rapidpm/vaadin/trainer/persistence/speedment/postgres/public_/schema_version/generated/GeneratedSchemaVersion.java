package org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.schema_version.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalInt;
import org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.schema_version.SchemaVersion;

/**
 * The generated base for the {@link
 * org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.schema_version.SchemaVersion}-interface
 * representing entities of the {@code schema_version}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedSchemaVersion {
    
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getInstalledRank()} method.
     */
    IntField<SchemaVersion, Integer> INSTALLED_RANK = IntField.create(
        Identifier.INSTALLED_RANK,
        SchemaVersion::getInstalledRank,
        SchemaVersion::setInstalledRank,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getVersion()} method.
     */
    StringField<SchemaVersion, String> VERSION = StringField.create(
        Identifier.VERSION,
        o -> OptionalUtil.unwrap(o.getVersion()),
        SchemaVersion::setVersion,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getDescription()} method.
     */
    StringField<SchemaVersion, String> DESCRIPTION = StringField.create(
        Identifier.DESCRIPTION,
        SchemaVersion::getDescription,
        SchemaVersion::setDescription,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getType()} method.
     */
    StringField<SchemaVersion, String> TYPE = StringField.create(
        Identifier.TYPE,
        SchemaVersion::getType,
        SchemaVersion::setType,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getScript()} method.
     */
    StringField<SchemaVersion, String> SCRIPT = StringField.create(
        Identifier.SCRIPT,
        SchemaVersion::getScript,
        SchemaVersion::setScript,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getChecksum()} method.
     */
    ComparableField<SchemaVersion, Integer, Integer> CHECKSUM = ComparableField.create(
        Identifier.CHECKSUM,
        o -> OptionalUtil.unwrap(o.getChecksum()),
        SchemaVersion::setChecksum,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getInstalledBy()} method.
     */
    StringField<SchemaVersion, String> INSTALLED_BY = StringField.create(
        Identifier.INSTALLED_BY,
        SchemaVersion::getInstalledBy,
        SchemaVersion::setInstalledBy,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getInstalledOn()} method.
     */
    ComparableField<SchemaVersion, Timestamp, Timestamp> INSTALLED_ON = ComparableField.create(
        Identifier.INSTALLED_ON,
        SchemaVersion::getInstalledOn,
        SchemaVersion::setInstalledOn,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getExecutionTime()} method.
     */
    IntField<SchemaVersion, Integer> EXECUTION_TIME = IntField.create(
        Identifier.EXECUTION_TIME,
        SchemaVersion::getExecutionTime,
        SchemaVersion::setExecutionTime,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link SchemaVersion} field that can be
     * obtained using the {@link SchemaVersion#getSuccess()} method.
     */
    BooleanField<SchemaVersion, Boolean> SUCCESS = BooleanField.create(
        Identifier.SUCCESS,
        SchemaVersion::getSuccess,
        SchemaVersion::setSuccess,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the installedRank of this SchemaVersion. The installedRank field
     * corresponds to the database column
     * postgres.public.schema_version.installed_rank.
     * 
     * @return the installedRank of this SchemaVersion
     */
    int getInstalledRank();
    
    /**
     * Returns the version of this SchemaVersion. The version field corresponds
     * to the database column postgres.public.schema_version.version.
     * 
     * @return the version of this SchemaVersion
     */
    Optional<String> getVersion();
    
    /**
     * Returns the description of this SchemaVersion. The description field
     * corresponds to the database column
     * postgres.public.schema_version.description.
     * 
     * @return the description of this SchemaVersion
     */
    String getDescription();
    
    /**
     * Returns the type of this SchemaVersion. The type field corresponds to the
     * database column postgres.public.schema_version.type.
     * 
     * @return the type of this SchemaVersion
     */
    String getType();
    
    /**
     * Returns the script of this SchemaVersion. The script field corresponds to
     * the database column postgres.public.schema_version.script.
     * 
     * @return the script of this SchemaVersion
     */
    String getScript();
    
    /**
     * Returns the checksum of this SchemaVersion. The checksum field
     * corresponds to the database column
     * postgres.public.schema_version.checksum.
     * 
     * @return the checksum of this SchemaVersion
     */
    OptionalInt getChecksum();
    
    /**
     * Returns the installedBy of this SchemaVersion. The installedBy field
     * corresponds to the database column
     * postgres.public.schema_version.installed_by.
     * 
     * @return the installedBy of this SchemaVersion
     */
    String getInstalledBy();
    
    /**
     * Returns the installedOn of this SchemaVersion. The installedOn field
     * corresponds to the database column
     * postgres.public.schema_version.installed_on.
     * 
     * @return the installedOn of this SchemaVersion
     */
    Timestamp getInstalledOn();
    
    /**
     * Returns the executionTime of this SchemaVersion. The executionTime field
     * corresponds to the database column
     * postgres.public.schema_version.execution_time.
     * 
     * @return the executionTime of this SchemaVersion
     */
    int getExecutionTime();
    
    /**
     * Returns the success of this SchemaVersion. The success field corresponds
     * to the database column postgres.public.schema_version.success.
     * 
     * @return the success of this SchemaVersion
     */
    boolean getSuccess();
    
    /**
     * Sets the installedRank of this SchemaVersion. The installedRank field
     * corresponds to the database column
     * postgres.public.schema_version.installed_rank.
     * 
     * @param installedRank to set of this SchemaVersion
     * @return              this SchemaVersion instance
     */
    SchemaVersion setInstalledRank(int installedRank);
    
    /**
     * Sets the version of this SchemaVersion. The version field corresponds to
     * the database column postgres.public.schema_version.version.
     * 
     * @param version to set of this SchemaVersion
     * @return        this SchemaVersion instance
     */
    SchemaVersion setVersion(String version);
    
    /**
     * Sets the description of this SchemaVersion. The description field
     * corresponds to the database column
     * postgres.public.schema_version.description.
     * 
     * @param description to set of this SchemaVersion
     * @return            this SchemaVersion instance
     */
    SchemaVersion setDescription(String description);
    
    /**
     * Sets the type of this SchemaVersion. The type field corresponds to the
     * database column postgres.public.schema_version.type.
     * 
     * @param type to set of this SchemaVersion
     * @return     this SchemaVersion instance
     */
    SchemaVersion setType(String type);
    
    /**
     * Sets the script of this SchemaVersion. The script field corresponds to
     * the database column postgres.public.schema_version.script.
     * 
     * @param script to set of this SchemaVersion
     * @return       this SchemaVersion instance
     */
    SchemaVersion setScript(String script);
    
    /**
     * Sets the checksum of this SchemaVersion. The checksum field corresponds
     * to the database column postgres.public.schema_version.checksum.
     * 
     * @param checksum to set of this SchemaVersion
     * @return         this SchemaVersion instance
     */
    SchemaVersion setChecksum(Integer checksum);
    
    /**
     * Sets the installedBy of this SchemaVersion. The installedBy field
     * corresponds to the database column
     * postgres.public.schema_version.installed_by.
     * 
     * @param installedBy to set of this SchemaVersion
     * @return            this SchemaVersion instance
     */
    SchemaVersion setInstalledBy(String installedBy);
    
    /**
     * Sets the installedOn of this SchemaVersion. The installedOn field
     * corresponds to the database column
     * postgres.public.schema_version.installed_on.
     * 
     * @param installedOn to set of this SchemaVersion
     * @return            this SchemaVersion instance
     */
    SchemaVersion setInstalledOn(Timestamp installedOn);
    
    /**
     * Sets the executionTime of this SchemaVersion. The executionTime field
     * corresponds to the database column
     * postgres.public.schema_version.execution_time.
     * 
     * @param executionTime to set of this SchemaVersion
     * @return              this SchemaVersion instance
     */
    SchemaVersion setExecutionTime(int executionTime);
    
    /**
     * Sets the success of this SchemaVersion. The success field corresponds to
     * the database column postgres.public.schema_version.success.
     * 
     * @param success to set of this SchemaVersion
     * @return        this SchemaVersion instance
     */
    SchemaVersion setSuccess(boolean success);
    
    enum Identifier implements ColumnIdentifier<SchemaVersion> {
        
        INSTALLED_RANK ("installed_rank"),
        VERSION        ("version"),
        DESCRIPTION    ("description"),
        TYPE           ("type"),
        SCRIPT         ("script"),
        CHECKSUM       ("checksum"),
        INSTALLED_BY   ("installed_by"),
        INSTALLED_ON   ("installed_on"),
        EXECUTION_TIME ("execution_time"),
        SUCCESS        ("success");
        
        private final String columnName;
        private final TableIdentifier<SchemaVersion> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "postgres";
        }
        
        @Override
        public String getSchemaName() {
            return "public";
        }
        
        @Override
        public String getTableName() {
            return "schema_version";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<SchemaVersion> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}