package org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.schema_version.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.schema_version.SchemaVersion;
import org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.schema_version.SchemaVersionImpl;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.schema_version.SchemaVersion}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSchemaVersionSqlAdapter {
    
    private final TableIdentifier<SchemaVersion> tableIdentifier;
    
    protected GeneratedSchemaVersionSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("postgres", "public", "schema_version");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected SchemaVersion apply(ResultSet resultSet) throws SpeedmentException {
        final SchemaVersion entity = createEntity();
        try {
            entity.setInstalledRank( resultSet.getInt(1)       );
            entity.setVersion(       resultSet.getString(2)    );
            entity.setDescription(   resultSet.getString(3)    );
            entity.setType(          resultSet.getString(4)    );
            entity.setScript(        resultSet.getString(5)    );
            entity.setChecksum(      getInt(resultSet, 6)      );
            entity.setInstalledBy(   resultSet.getString(7)    );
            entity.setInstalledOn(   resultSet.getTimestamp(8) );
            entity.setExecutionTime( resultSet.getInt(9)       );
            entity.setSuccess(       resultSet.getBoolean(10)  );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected SchemaVersionImpl createEntity() {
        return new SchemaVersionImpl();
    }
}