package org.rapidpm.vaadin.trainer.persistence.speedment.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.Injector;
import com.speedment.runtime.core.internal.AbstractApplicationBuilder;
import org.rapidpm.vaadin.trainer.persistence.speedment.Public_Application;
import org.rapidpm.vaadin.trainer.persistence.speedment.Public_ApplicationBuilder;
import org.rapidpm.vaadin.trainer.persistence.speedment.Public_ApplicationImpl;
import org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.comp_math_basic.CompMathBasicManagerImpl;
import org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.comp_math_basic.CompMathBasicSqlAdapter;
import org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.schema_version.SchemaVersionManagerImpl;
import org.rapidpm.vaadin.trainer.persistence.speedment.postgres.public_.schema_version.SchemaVersionSqlAdapter;

/**
 * A generated base {@link
 * com.speedment.runtime.core.internal.AbstractApplicationBuilder} class for the
 * {@link com.speedment.runtime.config.Project} named public.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPublic_ApplicationBuilder extends AbstractApplicationBuilder<Public_Application, Public_ApplicationBuilder> {
    
    protected GeneratedPublic_ApplicationBuilder() {
        super(Public_ApplicationImpl.class, GeneratedPublic_Metadata.class);
        withManager(CompMathBasicManagerImpl.class);
        withManager(SchemaVersionManagerImpl.class);
        withComponent(CompMathBasicSqlAdapter.class);
        withComponent(SchemaVersionSqlAdapter.class);
    }
    
    @Override
    public Public_Application build(Injector injector) {
        return injector.getOrThrow(Public_Application.class);
    }
}